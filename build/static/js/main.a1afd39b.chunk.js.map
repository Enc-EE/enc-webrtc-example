{"version":3,"sources":["HowTo.tsx","Chat.tsx","Chats.tsx","ChatService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["HowTo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","webRtcConnector","startListen","asyncToGenerator","regenerator_default","a","mark","_callee","client1Id","wrap","_context","prev","next","createListener","sent","startListener","setState","isStarted","stop","stopListen","stopListener","join","_callee2","_context2","state","client2Id","connect","addEventListener","dc","console","log","onDataChannel","channel","createChat","dataChannel","WebRtcConnector","receivedNegotiatedConnection","rtc","createDataChannel","_this2","react_default","createElement","className","onClick","type","size","value","onChange","e","target","React","Component","Chat","key","messages","sendMessage","chatService","message","receiveMessage","received","prevProps","prevState","snapshot","map","x","Chats","onClickChat","chat","activeChat","chats","undefined","i","Chat_Chat","ChatService","send","push","data","App","src_HowTo_0","Chats_Chats","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1afd39b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './HowTo.css';\r\nimport { WebRtcConnector } from \"enc-webrtc\";\r\n\r\nclass HowTo extends React.Component<{ onDataChannel: (e: RTCDataChannel) => void }, { client1Id: string, client2Id: string, isStarted: boolean }> {\r\n  private webRtcConnector: WebRtcConnector;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      client1Id: \"\",\r\n      client2Id: \"\",\r\n      isStarted: false\r\n    };\r\n    this.webRtcConnector = new WebRtcConnector(\"https://enc-webrtc-signaling-app.azurewebsites.net\");\r\n    this.webRtcConnector.receivedNegotiatedConnection.addEventListener((rtc) => {\r\n      var dataChannel = rtc.createDataChannel(\"data\");\r\n      this.props.onDataChannel(dataChannel);\r\n    });\r\n  }\r\n\r\n  startListen = async () => {\r\n    var client1Id = await this.webRtcConnector.createListener();\r\n    this.webRtcConnector.startListener();\r\n    this.setState({\r\n      client1Id: client1Id,\r\n      isStarted: this.webRtcConnector.isStarted\r\n    })\r\n  }\r\n\r\n  stopListen = () => {\r\n    this.webRtcConnector.stopListener();\r\n    this.setState({\r\n      isStarted: this.webRtcConnector.isStarted\r\n    })\r\n  }\r\n\r\n  join = async () => {\r\n    if (this.state.client2Id) {\r\n      var rtc = await this.webRtcConnector.connect(this.state.client2Id)\r\n      rtc.addEventListener(\"datachannel\", (dc) => {\r\n        console.log(\"hi there\");\r\n        this.props.onDataChannel(dc.channel);\r\n        // createChat(dc.channel);\r\n      });\r\n    } else {\r\n      console.log(\"id missing\");\r\n    }\r\n  }\r\n\r\n  createChat = (dataChannel: RTCDataChannel) => {\r\n    // new Chat(currentId, dataChannel);\r\n    // currentId++;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"howTo\">\r\n        <div className=\"client1Div\">\r\n          <div className=\"client1Buttons\">\r\n            <button onClick={this.startListen}>Start Listen</button>\r\n            <button onClick={this.stopListen}>Stop Listen</button>\r\n          </div>\r\n          {this.state.isStarted ?\r\n            <p>Listening: {this.state.client1Id}</p> :\r\n            <p>Not Listening.</p>}\r\n        </div>\r\n        <div className=\"client2Div\">\r\n          <input type=\"text\" size={5} value={this.state.client2Id} onChange={(e) => this.setState({ client2Id: e.target.value })} />\r\n          <button onClick={this.join}>Connect</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HowTo;\r\n","import React from 'react';\r\nimport ChatService from './ChatService';\r\nimport './Chat.css';\r\n\r\nexport default class Chat extends React.Component<{ chatService: ChatService }, { message: string, messages: string[] }> {\r\n    private key: number = 0;\r\n    private messages: string[] = [];\r\n    constructor(props: { chatService: ChatService }) {\r\n        super(props);\r\n        this.messages = this.props.chatService.messages;\r\n        this.state = ({ message: \"\", messages: this.messages });\r\n        this.props.chatService.received = this.receiveMessage;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any, snapshot: any) {\r\n        if (this.props != prevProps) {\r\n            this.messages = this.props.chatService.messages;\r\n            this.setState({ message: \"\", messages: this.messages });\r\n        }\r\n    }\r\n\r\n    sendMessage = () => {\r\n        this.props.chatService.sendMessage(this.state.message);\r\n        this.setState({ message: \"\", messages: this.messages });\r\n    }\r\n\r\n    receiveMessage = (e: MessageEvent) => {\r\n        this.setState({ message: \"\", messages: this.messages });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chat\">\r\n                <div className=\"messages\">{this.state.messages.map(x => <span className=\"message\" key={this.key++}>{x}</span>)}</div>\r\n                <textarea value={this.state.message} onChange={(e) => this.setState({ message: e.target.value })}></textarea>\r\n                <button onClick={this.sendMessage}>Send</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Chat from './Chat';\r\nimport ChatService from './ChatService';\r\nimport './Chats.css';\r\n\r\nexport default class Chats extends React.Component<{ chats: ChatService[] }, { chats: ChatService[], activeChat: ChatService | undefined }> {\r\n    private key: number = 0;\r\n\r\n    constructor(props: { chats: ChatService[] }) {\r\n        super(props);\r\n        this.state = ({ chats: this.props.chats, activeChat: undefined });\r\n    }\r\n\r\n    onClickChat = (chat: ChatService) => {\r\n        console.log(chat);\r\n\r\n        this.setState({ activeChat: chat });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chats\">\r\n                <div className=\"chats-nav\">\r\n                    {this.state.chats.map((x, i) =>\r\n                        <h2 className=\"chat-nav\" key={this.key++} onClick={e => this.onClickChat(x)}>\r\n                            {(i + 1)}\r\n                        </h2>)}\r\n                </div>\r\n                {this.state.activeChat ? <Chat chatService={this.state.activeChat}></Chat> : <div></div>}\r\n            </div>\r\n        );\r\n    }\r\n}","export default class ChatService {\r\n    public messages: string[] = [];\r\n    public received: (e: MessageEvent) => void = () => { };\r\n\r\n    constructor(public dataChannel: RTCDataChannel) {\r\n        this.dataChannel.addEventListener(\"message\", this.receiveMessage)\r\n    }\r\n\r\n    sendMessage = (message: string) => {\r\n        this.dataChannel.send(message);\r\n        this.messages.push(\"me: \" + message);\r\n    }\r\n\r\n    receiveMessage = (e: MessageEvent) => {\r\n        this.messages.push(\"not me: \" + e.data);\r\n        this.received(e);\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport HowTo from './HowTo';\nimport Chats from './Chats';\nimport ChatService from './ChatService';\n\nexport default class App extends React.Component<{}, { chats: ChatService[] }> {\n  private chats: ChatService[] = [];\n  constructor(props: {}) {\n    super(props);\n    this.state = { chats: this.chats };\n  }\n\n  onDataChannel = (e: RTCDataChannel) => {\n    this.chats.push(new ChatService(e));\n    this.setState({ chats: this.chats });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>Enc Web RTC</h1>\n        <HowTo onDataChannel={this.onDataChannel}></HowTo>\n        <Chats chats={this.state.chats}></Chats>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}